#!/usr/bin/env python3
import argparse
import json
import logging
import os
import shlex
import subprocess
import sys
from typing import Optional

PROG_NAME = os.path.basename(__file__)


def get_username_and_password_from_json_string(
    content: str, username_key: str, password_key: str
) -> tuple[Optional[str], Optional[str]]:
    config = json.loads(content)
    fields = config["fields"]
    username = None
    password = None
    for obj in fields:
        id = obj["id"]
        if id == username_key:
            username = obj["value"]
        elif id == password_key:
            password = obj["value"]
    return username, password


def run_1password_get_username_and_password(
    op_exe_path: str, item_name: str, username_key: str, password_key: str
) -> tuple[Optional[str], Optional[str]]:
    cmdline = (
        f"{shlex.quote(op_exe_path)} item get {shlex.quote(item_name)} --format json"
    )
    with subprocess.Popen(
        cmdline,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        shell=True,
        text=True,
    ) as proc:
        stdout, stderr = proc.communicate()
        logging.debug(f"item={item_name}, stdout={stdout}")
        returncode = proc.returncode
        if returncode != 0:
            errmsg = stderr.strip()
            print(
                f"exiting since lego failed with returncode={returncode}, err={errmsg}",
                file=sys.stderr,
            )
            sys.exit(1)
        return get_username_and_password_from_json_string(
            stdout, username_key, password_key
        )


def parse_args():
    parser = argparse.ArgumentParser(
        prog=PROG_NAME,
        description="Fake run lego",
    )
    parser.add_argument(
        "--op-exe",
        default=os.environ.get("OP_EXE"),
        required=True,
        help="Path to 1Password executable (can be set by OP_EXE environment variable)",
    )
    parser.add_argument(
        "--dns-api-item",
        required=True,
        help="1Password item name for SAKURA Cloud DNS Access Token and Access Token Secret",
    )
    parser.add_argument(
        "--dns-api-token-key",
        default="username",
        help="Key of Access Token in 1Password item for SAKURA Cloud DNS (default: username)",
    )
    parser.add_argument(
        "--dns-api-secret-key",
        default="password",
        help="Key of Access Token Secret in 1Password item for SAKURA Cloud DNS (default: password)",
    )
    parser.add_argument(
        "--manage-api-item",
        required=True,
        help="1Password item name for GHES management API",
    )
    parser.add_argument(
        "--manage-api-username-key",
        default="username",
        help="Key of user name in 1Password item for GHES management API (default: username)",
    )
    parser.add_argument(
        "--manage-api-password-key",
        default="password",
        help="Key of password in 1Password item for GHES management API (default: password)",
    )

    return parser.parse_args()


def main():
    args = parse_args()

    logging.basicConfig(
        level=logging.INFO,
    )

    [token, secret] = run_1password_get_username_and_password(
        args.op_exe,
        args.dns_api_item,
        args.dns_api_token_key,
        args.dns_api_secret_key,
    )
    [username, password] = run_1password_get_username_and_password(
        args.op_exe,
        args.manage_api_item,
        args.manage_api_username_key,
        args.manage_api_password_key,
    )
    print(f"{token}\n{secret}\n{username}\n{password}")


main()
